[33mcommit a5efe760559c1900377ae2268cc5a6c4103d141e[m[33m ([m[1;36mHEAD[m[33m, [m[1;31mETH/master[m[33m, [m[1;32mmaster[m[33m)[m
Author: MarkusMark1 <mark.ralstondaniel@mail.mcgill.ca>
Date:   Wed May 11 19:10:17 2022 -0400

    Creation of an ETH lottery smart contract,

[1mdiff --git a/.vscode/settings.json b/.vscode/settings.json[m
[1mnew file mode 100644[m
[1mindex 0000000..b675590[m
[1m--- /dev/null[m
[1m+++ b/.vscode/settings.json[m
[36m@@ -0,0 +1,3 @@[m
[32m+[m[32m{[m
[32m+[m[32m    "solidity.compileUsingRemoteVersion": "v0.8.11+commit.d7f03943"[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/lottery.sol b/lottery.sol[m
[1mnew file mode 100644[m
[1mindex 0000000..ba8d071[m
[1m--- /dev/null[m
[1m+++ b/lottery.sol[m
[36m@@ -0,0 +1,90 @@[m
[32m+[m[32m// SPDX-License-Identifier: MIT[m
[32m+[m[32mpragma solidity >=0.8.11 <0.9.0;[m
[32m+[m
[32m+[m[32mcontract Lottery{[m
[32m+[m[32m    address payable public owner ;[m[41m [m
[32m+[m[32m    address payable[] public players;[m
[32m+[m[32m    uint public lotteryId;[m
[32m+[m[32m    mapping (uint => address payable) public lotteryHistory;[m
[32m+[m
[32m+[m
[32m+[m[32m    /// payable modifier so it can receive coins[m
[32m+[m
[32m+[m[32m    constructor () {[m
[32m+[m[32m        owner= payable(msg.sender) ; ///set the deployer of the contract as the owner[m
[32m+[m[32m        lotteryId =1 ;[m
[32m+[m[41m        [m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    function getBalance() public view returns (uint){[m
[32m+[m[32m        return address(this).balance;[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    function getWinnerByLottery(uint lotteryNumber) public view returns(address payable){[m
[32m+[m[32m        return lotteryHistory[lotteryNumber];[m
[32m+[m[32m    }[m[41m [m
[32m+[m
[32m+[m[32m    function getPlayers() public view returns (address payable[] memory){[m
[32m+[m[32m        ///returns players list, memory needed[m
[32m+[m[32m        return players;[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    function enter() public payable {[m
[32m+[m
[32m+[m[32m        ///require player to pay funds[m
[32m+[m[32m        require(msg.value > .01 ether);[m[41m [m
[32m+[m
[32m+[m[32m        players.push(payable(msg.sender));[m[41m [m
[32m+[m[32m        ///msg.sender is the person running the enter function to enter the lottery we add them to players list[m
[32m+[m[32m        ///must make address payable before adding it to the payable array that is "players"[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    function getRandomNumber() public view returns(uint){ ///just views blockchain no input[m
[32m+[m[32m        return uint(keccak256(abi.encodePacked(owner, block.timestamp))); ///owner address and current time to gen a pseudorandom number[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    modifier onlyOwner(){[m
[32m+[m[32m        ///owner must be the one sending function[m
[32m+[m[32m        require(msg.sender==owner);[m
[32m+[m
[32m+[m[32m        _;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    function getFivePercent() public view returns (uint){[m
[32m+[m[32m        return (address(this).balance *5) /100;[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    function pickWinner() public onlyOwner{[m
[32m+[m
[32m+[m
[32m+[m[32m        ///randomly choose an index[m
[32m+[m[32m        uint indexWinner = getRandomNumber() % players.length;[m
[32m+[m
[32m+[m[32m        uint fivePercent = (address(this).balance *5) /100 ;[m
[32m+[m
[32m+[m[32m        if(players.length > 1){[m
[32m+[m[32m            ///5% transferred to owner for hosting the game if there are enough players[m
[32m+[m[32m            owner.transfer(fivePercent);[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        ///transfer the remaining entire balance of the smart contract[m[41m [m
[32m+[m[32m        players[indexWinner].transfer(address(this).balance);[m
[32m+[m
[32m+[m
[32m+[m[32m        ///vector attack so we increment after, track winners and ID[m
[32m+[m[32m        lotteryHistory[lotteryId] = players[indexWinner];[m
[32m+[m[32m        lotteryId++;[m[41m [m
[32m+[m
[32m+[m[32m        ///reset players array[m
[32m+[m[32m        players = new address payable [](0);[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
